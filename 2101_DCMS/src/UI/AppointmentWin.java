/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.sql.*;
import javax.swing.JOptionPane;
import Controller_Connector.DBConnect_Main;
import javax.swing.table.DefaultTableModel;

public class AppointmentWin extends javax.swing.JFrame {

    DBConnect_Main dbc_App = new DBConnect_Main();
    private PreparedStatement preparedStatement_App;
    private Connection con_App;
    public AppointmentWin() {
        initComponents();
        con_App = dbc_App.getConnection();
        loadPatientComboBox();
        loadAppointmentTable();
        loadTreatmentComboBox();
    }
    private int getPatientID(String patientName) throws SQLException {
    String query = "SELECT PatientID FROM patient WHERE PatientName = ?";
    PreparedStatement pst = con_App.prepareStatement(query);
    pst.setString(1, patientName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        return rs.getInt("PatientID");
    } else {
        throw new SQLException("Patient not found!");
    }
}
    
    private int getTreatmentID(String treatmentName) throws SQLException {
    String query = "SELECT TreatmentID FROM treatment WHERE TreatmentName = ?";
    PreparedStatement pst = con_App.prepareStatement(query);
    pst.setString(1, treatmentName);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        return rs.getInt("TreatmentID");
    } else {
        throw new SQLException("Treatment not found!");
    }
}
    
    private void loadPatientComboBox() {
    try {
        String query = "SELECT PatientName FROM patient";
        PreparedStatement pst = con_App.prepareStatement(query);
        ResultSet rs = pst.executeQuery();

        // Clear existing items
        patientChoose.removeAllItems();
        patientChoose.addItem("Select Patient"); // Add a default option

        while (rs.next()) {
            String patientName = rs.getString("PatientName");
            patientChoose.addItem(patientName); // Add each patient name to combo box
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading patients: " + ex.getMessage());
    }
}
    
    private void loadTreatmentComboBox() {
    try {
        String query = "SELECT TreatmentName FROM treatment";
        PreparedStatement pst = con_App.prepareStatement(query);
        ResultSet rs = pst.executeQuery();

        // Clear existing items
        treatment.removeAllItems();
        treatment.addItem("Select Treatment"); // Add a default option

        while (rs.next()) {
            String treatmentName = rs.getString("TreatmentName");
            treatment.addItem(treatmentName); // Add each treatment name to combo box
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading treatments: " + ex.getMessage());
    }
}




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        dateAppoint = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        schedTime = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        patientChoose = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        treatment = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        AppointTable = new javax.swing.JTable();
        editAppoint = new javax.swing.JButton();
        saveAppoint = new javax.swing.JButton();
        deleteAppoint = new javax.swing.JButton();
        clearAppoint = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        patientButton1 = new javax.swing.JButton();
        appointButton1 = new javax.swing.JButton();
        treatmentButton1 = new javax.swing.JButton();
        prescripButton2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        prescripButton3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(892, 574));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(java.awt.Color.red, 3, true));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Bahnschrift", 0, 24)); // NOI18N
        jLabel3.setForeground(java.awt.Color.red);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java DCMS icons/appoinment2.png"))); // NOI18N
        jLabel3.setText("Appointments");

        jLabel1.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        jLabel1.setText("Date");

        jLabel4.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        jLabel4.setText("Treatments");

        schedTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8 AM - 10AM", "10 AM - 12 PM", "1 PM - 2PM", "2 PM -3 PM", "4 PM -5 PM", "5 PM - 6 PM" }));
        schedTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedTimeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        jLabel5.setText("Patient");

        jLabel6.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        jLabel6.setText("Scheduled time");

        treatment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treatmentActionPerformed(evt);
            }
        });

        AppointTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        AppointTable.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        AppointTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "AppointmentID", "Appointment Date", "Patient", "Appointment Time", "Treatment"
            }
        ));
        AppointTable.setGridColor(new java.awt.Color(0, 0, 0));
        AppointTable.setName(""); // NOI18N
        AppointTable.setShowGrid(true);
        AppointTable.setSurrendersFocusOnKeystroke(true);
        jScrollPane2.setViewportView(AppointTable);

        editAppoint.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        editAppoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java DCMS icons/edit.png"))); // NOI18N
        editAppoint.setText("EDIT");
        editAppoint.setBorder(new javax.swing.border.LineBorder(java.awt.Color.red, 2, true));
        editAppoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAppointActionPerformed(evt);
            }
        });

        saveAppoint.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        saveAppoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java DCMS icons/save.png"))); // NOI18N
        saveAppoint.setText("SAVE");
        saveAppoint.setBorder(new javax.swing.border.LineBorder(java.awt.Color.red, 2, true));
        saveAppoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAppointActionPerformed(evt);
            }
        });

        deleteAppoint.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        deleteAppoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java DCMS icons/bin.png"))); // NOI18N
        deleteAppoint.setText("DELETE");
        deleteAppoint.setBorder(new javax.swing.border.LineBorder(java.awt.Color.red, 2, true));
        deleteAppoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAppointActionPerformed(evt);
            }
        });

        clearAppoint.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        clearAppoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java DCMS icons/clear-filter.png"))); // NOI18N
        clearAppoint.setText("CLEAR");
        clearAppoint.setBorder(new javax.swing.border.LineBorder(java.awt.Color.red, 2, true));
        clearAppoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAppointActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        jLabel9.setText("Treatment List");

        jPanel3.setBackground(java.awt.Color.red);

        patientButton1.setBackground(java.awt.Color.red);
        patientButton1.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        patientButton1.setForeground(new java.awt.Color(255, 255, 255));
        patientButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java DCMS icons/patient.png"))); // NOI18N
        patientButton1.setText("Patients");
        patientButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        patientButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientButton1ActionPerformed(evt);
            }
        });

        appointButton1.setBackground(java.awt.Color.red);
        appointButton1.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        appointButton1.setForeground(new java.awt.Color(255, 255, 255));
        appointButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java DCMS icons/appoinment2.png"))); // NOI18N
        appointButton1.setText("Appointments");
        appointButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        appointButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointButton1ActionPerformed(evt);
            }
        });

        treatmentButton1.setBackground(java.awt.Color.red);
        treatmentButton1.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        treatmentButton1.setForeground(new java.awt.Color(255, 255, 255));
        treatmentButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java DCMS icons/syringe.png"))); // NOI18N
        treatmentButton1.setText("Treatments");
        treatmentButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        treatmentButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treatmentButton1ActionPerformed(evt);
            }
        });

        prescripButton2.setBackground(java.awt.Color.red);
        prescripButton2.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        prescripButton2.setForeground(new java.awt.Color(255, 255, 255));
        prescripButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java DCMS icons/prescription.png"))); // NOI18N
        prescripButton2.setText("Prescriptions");
        prescripButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        prescripButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prescripButton2ActionPerformed(evt);
            }
        });

        prescripButton3.setBackground(java.awt.Color.red);
        prescripButton3.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        prescripButton3.setForeground(new java.awt.Color(255, 255, 255));
        prescripButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java DCMS icons/cashless-payment.png"))); // NOI18N
        prescripButton3.setText("Payment");
        prescripButton3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        prescripButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prescripButton3ActionPerformed(evt);
            }
        });

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Java DCMS icons/prevention.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appointButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(treatmentButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prescripButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel11))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(prescripButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel10)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(8, 8, 8)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(patientButton1)
                .addGap(9, 9, 9)
                .addComponent(appointButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(treatmentButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prescripButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prescripButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(dateAppoint, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(patientChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(schedTime, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(treatment, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(saveAppoint, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(editAppoint, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteAppoint, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearAppoint, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(9, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(261, 261, 261))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(243, 243, 243)
                    .addComponent(jLabel3)
                    .addContainerGap(457, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dateAppoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientChoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(schedTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(treatment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editAppoint)
                    .addComponent(deleteAppoint)
                    .addComponent(saveAppoint)
                    .addComponent(clearAppoint))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jLabel3)
                    .addContainerGap(526, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void schedTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_schedTimeActionPerformed

    private void treatmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treatmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_treatmentActionPerformed

    private void deleteAppointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAppointActionPerformed
        int selectedRow = AppointTable.getSelectedRow(); // Get selected row index
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an appointment to delete.");
        return;
    }

    try {
        // Get the AppointmentID from the selected row
        int appointmentID = (int) AppointTable.getValueAt(selectedRow, 0);

        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete this appointment?", 
            "Delete Appointment", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return; // Exit if the user chooses not to delete
        }

        // Query to delete the appointment
        String query = "DELETE FROM appointment WHERE AppointmentID = ?";
        PreparedStatement preparedStatement = con_App.prepareStatement(query);
        preparedStatement.setInt(1, appointmentID);

        // Execute deletion
        int rowsAffected = preparedStatement.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Appointment deleted successfully.");
            loadAppointmentTable(); // Refresh the table after deletion
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete appointment. Please try again.");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error deleting appointment: " + ex.getMessage());
        }
    }//GEN-LAST:event_deleteAppointActionPerformed

    private void clearAppointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAppointActionPerformed
        clearAppointmentFields();
    }//GEN-LAST:event_clearAppointActionPerformed

    private void patientButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientButton1ActionPerformed
        // TODO add your handling code here:
        close();
        Patient patientWindow = new Patient();
        patientWindow.setVisible(true);
    }//GEN-LAST:event_patientButton1ActionPerformed

    private void appointButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointButton1ActionPerformed
        // TODO add your handling code here:
        close();
        AppointmentWin appointmentWindow = new AppointmentWin();
        appointmentWindow.setVisible(true);
    }//GEN-LAST:event_appointButton1ActionPerformed

    private void treatmentButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treatmentButton1ActionPerformed
        // TODO add your handling code here:
        close();
        Treatment treatmentWindow = new Treatment();
        treatmentWindow.setVisible(true);
    }//GEN-LAST:event_treatmentButton1ActionPerformed

    private void prescripButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prescripButton2ActionPerformed
        // TODO add your handling code here:
        close();
        Prescriptions prescriptionsWindow = new Prescriptions();
        prescriptionsWindow.setVisible(true);
    }//GEN-LAST:event_prescripButton2ActionPerformed

    private void prescripButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prescripButton3ActionPerformed
        // TODO add your handling code here:
        close();
         Payment paymentWindow = new Payment();
         paymentWindow.setVisible(true);
    }//GEN-LAST:event_prescripButton3ActionPerformed

    private void saveAppointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAppointActionPerformed
        java.util.Date dateOfApp = dateAppoint.getDate(); // JDateChooser for appointment date
    String p_app = patientChoose.getSelectedItem() != null ? patientChoose.getSelectedItem().toString() : ""; // Dropdown for Patient
    String schedApp = schedTime.getSelectedItem() != null ? schedTime.getSelectedItem().toString() : ""; // Dropdown for schedule time
    String treatApp = treatment.getSelectedItem() != null ? treatment.getSelectedItem().toString() : ""; // Dropdown for treatment

    // Validate input fields
    if (dateOfApp == null || p_app.isEmpty() || schedApp.isEmpty() || treatApp.isEmpty()) {
        JOptionPane.showMessageDialog(this, "All fields are required!");
        return;
    }
    
    try {
        // Format the appointment date to "yyyy-MM-dd"
        java.text.SimpleDateFormat outputFormat = new java.text.SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = outputFormat.format(dateOfApp);

        // Query to insert data into the `appointment` table
        String query = "INSERT INTO appointment (AppointmentDate, AppointmentTime, PatientID, TreatmentID) VALUES (?, ?, ?, ?)";

        // Get PatientID and TreatmentID based on selections
        int patientID = getPatientID(p_app);
        int treatmentID = getTreatmentID(treatApp);

        // Prepare the statement and set parameters
        preparedStatement_App = con_App.prepareStatement(query);
        preparedStatement_App.setString(1, formattedDate); // AppointmentDate
        preparedStatement_App.setString(2, schedApp);      // AppointmentTime
        preparedStatement_App.setInt(3, patientID);        // PatientID
        preparedStatement_App.setInt(4, treatmentID);      // TreatmentID

        // Execute the query
        preparedStatement_App.executeUpdate();

        // Success message
        JOptionPane.showMessageDialog(this, "Appointment saved successfully!");

        // Clear fields and reload table
        clearAppointmentFields();
        loadAppointmentTable();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error saving appointment: " + ex.getMessage());
        }
    }//GEN-LAST:event_saveAppointActionPerformed

    private void editAppointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAppointActionPerformed
        java.util.Date dateOfApp = dateAppoint.getDate(); // JDateChooser
    String p_app = patientChoose.getSelectedItem().toString(); // Selected Patient
    String schedApp = schedTime.getSelectedItem().toString(); // Schedule
    String treatApp = treatment.getSelectedItem().toString(); // Selected Treatment

    // Check if any of the fields are empty
    if (p_app.equals("Select Patient") || schedApp.isEmpty() || treatApp.equals("Select Treatment")) {
        JOptionPane.showMessageDialog(this, "Please fill in all required fields!");
        return;
    }

    try {
        // Get the Appointment ID from the table's selected row
        int selectedRow = AppointTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment to edit.");
            return;
        }
        int appointmentID = (int) AppointTable.getValueAt(selectedRow, 0);

        // Format the appointment date (if provided)
        String formattedDate = null;
        if (dateOfApp != null) {
            java.text.SimpleDateFormat outputFormat = new java.text.SimpleDateFormat("yyyy-MM-dd");
            formattedDate = outputFormat.format(dateOfApp);
        }

        // Retrieve PatientID and TreatmentID
        int patientID = getPatientID(p_app);
        int treatmentID = getTreatmentID(treatApp);

        // Build the SQL query
        String query = "UPDATE appointment SET "
                + "AppointmentDate = COALESCE(?, AppointmentDate), "
                + "AppointmentTime = COALESCE(?, AppointmentTime), "
                + "PatientID = COALESCE(?, PatientID), "
                + "TreatmentID = COALESCE(?, TreatmentID) "
                + "WHERE AppointmentID = ?";

        // Prepare the SQL statement
        PreparedStatement pst = con_App.prepareStatement(query);
        if (formattedDate != null) {
            pst.setString(1, formattedDate);
        } else {
            pst.setNull(1, java.sql.Types.DATE);
        }
        pst.setString(2, schedApp); // Appointment Time
        pst.setInt(3, patientID);  // PatientID
        pst.setInt(4, treatmentID); // TreatmentID
        pst.setInt(5, appointmentID); // AppointmentID (WHERE clause)

        // Execute the update
        int rowsUpdated = pst.executeUpdate();

        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Appointment updated successfully!");
            clearAppointmentFields();
            loadAppointmentTable(); // Refresh the table to show updated data
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update appointment. Please try again.");
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error updating appointment: " + ex.getMessage());
        }
    }//GEN-LAST:event_editAppointActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentWin().setVisible(true);
            }
        });
    }
    
        private void clearAppointmentFields() {
    dateAppoint.setDate(null);
    patientChoose.setSelectedIndex(0);
    schedTime.setSelectedIndex(0);
    treatment.setSelectedIndex(0);
    }
        
        private void loadAppointmentTable() {
    try {
        // Clear the existing rows in the table model
        DefaultTableModel model = (DefaultTableModel) AppointTable.getModel();
        model.setRowCount(0);

        // Query to fetch appointment data ordered by AppointmentID
        String query = "SELECT a.AppointmentID, a.AppointmentDate, a.AppointmentTime, "
                + "p.PatientName, t.TreatmentName "
                + "FROM appointment a "
                + "JOIN patient p ON a.PatientID = p.PatientID "
                + "JOIN treatment t ON a.TreatmentID = t.TreatmentID "
                + "ORDER BY a.AppointmentID ASC";

        // Execute the query
        Statement stmt = con_App.createStatement();
        ResultSet rs = stmt.executeQuery(query);

        // Populate the table with data
        while (rs.next()) {
            int appointmentID = rs.getInt("AppointmentID");
            String appointmentDate = rs.getString("AppointmentDate");
            String appointmentTime = rs.getString("PatientName");
            String patientName = rs.getString("AppointmentTime");
            String treatmentName = rs.getString("TreatmentName");

            // Add row to the table model
            model.addRow(new Object[]{appointmentID, appointmentDate, appointmentTime, patientName, treatmentName});
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading appointment data: " + ex.getMessage());
    }
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AppointTable;
    private javax.swing.JButton appointButton1;
    private javax.swing.JButton clearAppoint;
    private com.toedter.calendar.JDateChooser dateAppoint;
    private javax.swing.JButton deleteAppoint;
    private javax.swing.JButton editAppoint;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton patientButton1;
    private javax.swing.JComboBox<String> patientChoose;
    private javax.swing.JButton prescripButton2;
    private javax.swing.JButton prescripButton3;
    private javax.swing.JButton saveAppoint;
    private javax.swing.JComboBox<String> schedTime;
    private javax.swing.JComboBox<String> treatment;
    private javax.swing.JButton treatmentButton1;
    // End of variables declaration//GEN-END:variables

    public void close() {
    // Close the current JFrame (if needed)
    this.setVisible(false); // Hide the frame
    this.dispose();         // Release resources
}

}
